"""5.3. タプルとシーケンス

https://docs.python.org/ja/3.13/tutorial/datastructures.html#tuples-and-sequences

リストや文字列はシーケンス型という型の一種である。
別のシーケンス型tupleについてみてみる。"""


def ex1():
    t = 1, 2, 2, "name"
    print(t)
    # (1, 2, 2, 'name')

    # タプルは入れ子にできる
    u = t, (12, 3)
    print(u)
    # ((1, 2, 2, 'name'), (12, 3))

    # タプルはimmutable(__setitem__が定義されていない)
    # t[0] = 12

    # しかし、mutableオブジェクトを含むことができる
    v = ([1, 2, 3], [4, 5, 6])
    print(v)
    # ([1, 2, 3], [4, 5, 6])

    # しかもmutableオブジェクトは変更できる。
    v[0][0] = 2
    print(v)
    # ([2, 2, 3], [4, 5, 6])

    # もちろんこれはだめ
    # v[0] = [1, 2, 3]


"""公式ドキュメントによる、tupleとlistの使い分け

* tupleは複数の型の要素からなることがあり、要素へのアクセスはアンパックもあるいはインデックスで行うことが多い
* listは同一の型の要素からなり、イテレータでアクセスすることが多い"""


def ex2():
    """0個または1個からなるtupleの構成"""

    # 空タプルはこれでいい
    empty = ()

    # t = 1 # これではタプルにならない

    # 後ろにコンマをつける
    t = (1,)  # これはOK
    # 私の用いているフォーマッタは「1,」と入力すると「(1,)」に勝手に変換するので、後者が好ましいのだろう


def ex3():
    """シーケンスのアンパック

    任意のシーケンスはアンパックできる"""

    l = [0, 1, 2]
    t = "w", 4
    d = {
        "name": "taro",
        "timpo": 25,
    }

    # リストのアンパック
    # k, m = l # len(l) だけ左辺に変数が必要
    k, m, n = l
    print(k, m, n)
    # 辞書のアンパック
    name, timpo = d
    # 辞書のアンパックは各キーの値を忘れる。
    print(name, timpo)


if __name__ == "__main__":
    ex3()
